# $Id$
# This is the CMake project file for the libe57 reference implementation
#
# Copyright 2010 Roland Schwarz, Riegl LMS GmbH
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

cmake_minimum_required(VERSION 2.8)

# Private Xerces find module
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/../cmake/Modules/")

include(CMakeGenerateDocumentation)

project(E57RefImpl-doc)

# developer adjustable version numbers
set(${PROJECT_NAME}_MAJOR_VERSION 0)
set(${PROJECT_NAME}_MINOR_VERSION 2)

# try to find subversion revision number
execute_process(
    COMMAND svnversion
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE ${PROJECT_NAME}_BUILD_VERSION
)
string(STRIP ${${PROJECT_NAME}_BUILD_VERSION} ${PROJECT_NAME}_BUILD_VERSION)
if (NOT ${PROJECT_NAME}_BUILD_VERSION)
    set(${PROJECT_NAME}_BUILD_VERSION "unknown")
endif ()

if (MSVC)
    # Compiler switches for C++
    set(CMAKE_CXX_FLAGS_DEBUG "/MTd /D_DEBUG /Zi /Ob0 /Od /RTC1")
    set(CMAKE_CXX_FLAGS_RELEASE "/MT /O2 /Ob2 /D NDEBUG")
    set(CMAKE_CXX_FLAGS_MINSIZEREL "/MT /O1 /Ob1 /D NDEBUG")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/MT /Zi /O2 /Ob1 /D NDEBUG")
    # Compiler switches for C
    set(CMAKE_C_FLAGS_DEBUG "/MTd /D_DEBUG /Zi  /Ob0 /Od /RTC1")
    set(CMAKE_C_FLAGS_RELEASE "/MT /O2 /Ob2 /D NDEBUG")
    set(CMAKE_C_FLAGS_MINSIZEREL "/MT /O1 /Ob1 /D NDEBUG")
    set(CMAKE_C_FLAGS_RELWITHDEBINFO "/MT /Zi /O2 /Ob1 /D NDEBUG")
endif (MSVC)

# calculate the library name tag
set(T_ ${PROJECT_NAME})
set(T_ ${T_}-${${PROJECT_NAME}_MAJOR_VERSION})
set(T_ ${T_}.${${PROJECT_NAME}_MINOR_VERSION})
set(T_ ${T_}.${${PROJECT_NAME}_BUILD_VERSION})
set(${PROJECT_NAME}_TAG ${T_})

# propose a default installation directory
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    string(REGEX REPLACE "/${PROJECT_NAME}" "" CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
    set(T_ -${${PROJECT_NAME}_MAJOR_VERSION})
    set(T_ ${T_}-${${PROJECT_NAME}_MINOR_VERSION})
    set(T_ ${T_}-${${PROJECT_NAME}_BUILD_VERSION})
    set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/${${PROJECT_NAME}_TAG}
        CACHE PATH
        "Install path prefix, prepended onto install directories."
        FORCE
    )
endif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

# Find the Boost and Xerces libraries
find_package(Boost QUIET)
if (NOT Boost_FOUND)
    set(BOOST_INCLUDEDIR CACHE PATH  "Location of the boost include directory" )
    message(FATAL_ERROR
"Unable to find boost library.
Please set the BOOST_INCLUDEDIR to point to the boost header files."
)
endif(NOT Boost_FOUND)

set(Xerces_USE_STATIC_LIBS On)
find_package(Xerces QUIET)
if (NOT Xerces_FOUND)
    set(XERCES_ROOT CACHE PATH "Location of the xerces library")
    message(FATAL_ERROR
"Unable to find xerces library.
Please set the the XERCES_ROOT to point to the root of the xerces directory."
)
endif (NOT Xerces_FOUND)

include_directories(
    ../include
    ../src/refimpl
    ${Xerces_INCLUDE_DIR}
    ${Boost_INCLUDE_DIR}
)

#
# The reference implementation
#

add_library( E57RefImpl STATIC
    ../src/refimpl/E57Foundation.cpp
    ../src/refimpl/E57FoundationImpl.cpp
    ../src/refimpl/E57FoundationImpl.h
    ../include/E57Foundation.h
)
set_target_properties( E57RefImpl
    PROPERTIES COMPILE_DEFINITIONS XERCES_STATIC_LIBRARY
)
set_target_properties( E57RefImpl
    PROPERTIES DEBUG_POSTFIX "-d"
)

#
# E57-4 Tools needed for doc building
#

add_executable( e57xmldump
    ../src/tools/e57xmldump.cpp
)
set_target_properties( e57xmldump
    PROPERTIES COMPILE_DEFINITIONS XERCES_STATIC_LIBRARY
)
target_link_libraries( e57xmldump
    E57RefImpl
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${Xerces_LIBRARY_RELEASE}
)

#
# Documentation
#

set(DOC_EXAMPLES
    FoundationAPI/examples/HelloWorld.cpp
    FoundationAPI/examples/Cancel.cpp
    FoundationAPI/examples/Extensions.cpp
    FoundationAPI/examples/NameParse.cpp
    FoundationAPI/examples/ImageFileDump.cpp
    FoundationAPI/examples/NodeFunctions.cpp
    FoundationAPI/examples/StructureCreate.cpp
    FoundationAPI/examples/VectorCreate.cpp
    FoundationAPI/examples/VectorFunctions.cpp
    FoundationAPI/examples/IntegerCreate.cpp
    FoundationAPI/examples/ScaledIntegerCreate.cpp
    FoundationAPI/examples/FloatCreate.cpp
    FoundationAPI/examples/StringCreate.cpp
    FoundationAPI/examples/BlobCreate.cpp
    FoundationAPI/examples/CompressedVectorCreate.cpp
    FoundationAPI/examples/SourceDestBufferNumericCreate.cpp
    FoundationAPI/examples/SourceDestBufferStringCreate.cpp
    FoundationAPI/examples/E57ExceptionFunctions.cpp
    FoundationAPI/examples/RawXML.cpp
    FoundationAPI/examples/Versions.cpp
    FoundationAPI/examples/SourceDestBufferFunctions.cpp
    FoundationAPI/examples/CheckInvariant.cpp
)

file(MAKE_DIRECTORY ${PROJECT_BINARY_DIR}/FoundationAPI/examples)

generate_documentation(doc
    FoundationAPI/Doxyfile
    DOXYVAR_INPUT
        ../src/refimpl/E57Foundation.cpp
        ../include/E57Foundation.h
        ${DOC_EXAMPLES}
    DOXYVAR_OUTPUT_DIRECTORY
        ${PROJECT_BINARY_DIR}
    DOXYVAR_EXAMPLE_PATH
        FoundationAPI/examples
        ${PROJECT_BINARY_DIR}/FoundationAPI/examples
        ../src/refimpl
)

foreach(X ${DOC_EXAMPLES})
    get_filename_component(F ${X} NAME_WE)
    add_executable(${F} ${X})
    set_target_properties(${F} PROPERTIES COMPILE_DEFINITIONS XERCES_STATIC_LIBRARY)
    target_link_libraries(${F}
        E57RefImpl
        debug ${Xerces_LIBRARY_DEBUG}
        optimized ${Xerces_LIBRARY_RELEASE}
    )
    add_custom_command(TARGET ${F} POST_BUILD
        COMMAND ${F} > FoundationAPI/examples/${F}.out
        COMMAND e57xmldump temp._e57 > FoundationAPI/examples/${F}.xml
    )
    add_dependencies(doc ${F})
endforeach()

install(
    DIRECTORY
        ${PROJECT_BINARY_DIR}/html
    DESTINATION
        .
)

install(
    FILES
        libE57ReleaseNotes.doc
        las2e57.doc
        e57xmldump.doc
        e57fields.doc
    DESTINATION
        .
)
