# $Id: $
# This is the CMake project file for the libe57 reference implementation
#
# Copyright 2010 Roland Schwarz, Riegl LMS GmbH
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

# This is work in progress.
# I have made a first attempt to create a cmake file to build the libe57.
# So far this script will generate a solution file for MS visual C++,
# to compile the DemoWriter01 example. We need to further investigate how
# *) xerces and boost can be found in the CMake way
# *) figure out how to generate Debug and Release variants
# *) figure out how to correctly specify compiler switches in a platform
#    agnostic manner
# *) automate the svnversion numbering with cmake
# *) figure out how the final library gets installed
# *) figure out how the doc can be built (cmake seems to have some provisions)
# *) figure out how regression testing can be done with cmake

cmake_minimum_required(VERSION 2.8)

# Some paths that need to be set by the user
set(XERCES CACHE PATH "The location of the xerces library")
set(BOOST CACHE PATH "The location of the boost library")

project(libe57)

include_directories(
    include
    include/time_conversion
    src/refimpl
    ${XERCES}/include
    ${BOOST}
)

find_library(xerces_LIBRARY xerces-c_static_3D.lib ${XERCES}/lib)

add_library(RefImpl STATIC
    src/refimpl/E57Foundation.cpp
    src/refimpl/E57FoundationImpl.cpp
)

add_library(las
    src/LASReader/LasReader.cpp
)

add_library(tconv
    src/time_conversion/time_conversion.c
)

add_executable(DemoWrite01
    src/examples/DemoWrite01.cpp
)

set_target_properties(RefImpl DemoWrite01 PROPERTIES
    COMPILE_DEFINITIONS XERCES_STATIC_LIBRARY
    COMPILE_FLAGS /MTd
)

target_link_libraries(
    DemoWrite01
    ${xerces_LIBRARY}
    RefImpl
    tconv
)
