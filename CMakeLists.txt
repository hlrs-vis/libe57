# $Id$
# This is the CMake project file for the libe57 reference implementation
#
# Copyright 2010-2011 Roland Schwarz, Riegl LMS GmbH
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

cmake_minimum_required(VERSION 2.8)

# Private Xerces find module
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

project(E57RefImpl)

# developer adjustable version numbers
set(${PROJECT_NAME}_MAJOR_VERSION 0)
set(${PROJECT_NAME}_MINOR_VERSION 3)

# try to find subversion revision number
execute_process(
    COMMAND svnversion
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    OUTPUT_VARIABLE ${PROJECT_NAME}_BUILD_VERSION
)
if (NOT ${PROJECT_NAME}_BUILD_VERSION)
    set(${PROJECT_NAME}_BUILD_VERSION "unknown")
else()
    string(STRIP ${${PROJECT_NAME}_BUILD_VERSION} ${PROJECT_NAME}_BUILD_VERSION)
endif ()

set(E57_REFIMPL_REVISION_ID ${${PROJECT_NAME}_MAJOR_VERSION}.${${PROJECT_NAME}_MINOR_VERSION}.${${PROJECT_NAME}_BUILD_VERSION})

if (MSVC)
    # Compiler switches for C++
    set(CMAKE_CXX_FLAGS_DEBUG "/MTd /D_DEBUG /Zi /Ob0 /Od /RTC1")
    set(CMAKE_CXX_FLAGS_RELEASE "/MT /O2 /Ob2 /D NDEBUG")
    set(CMAKE_CXX_FLAGS_MINSIZEREL "/MT /O1 /Ob1 /D NDEBUG")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/MT /Zi /O2 /Ob1 /D NDEBUG")
    # Compiler switches for C
    set(CMAKE_C_FLAGS_DEBUG "/MTd /D_DEBUG /Zi  /Ob0 /Od /RTC1")
    set(CMAKE_C_FLAGS_RELEASE "/MT /O2 /Ob2 /D NDEBUG")
    set(CMAKE_C_FLAGS_MINSIZEREL "/MT /O1 /Ob1 /D NDEBUG")
    set(CMAKE_C_FLAGS_RELWITHDEBINFO "/MT /Zi /O2 /Ob1 /D NDEBUG")
endif (MSVC)

# calculate the library name tag
set(T_ ${PROJECT_NAME})
set(T_ ${T_}-${${PROJECT_NAME}_MAJOR_VERSION})
set(T_ ${T_}.${${PROJECT_NAME}_MINOR_VERSION})
set(T_ ${T_}.${${PROJECT_NAME}_BUILD_VERSION})
set(T_ ${T_}-${CMAKE_SYSTEM_PROCESSOR})
if (CMAKE_CL_64)
    set(T_ ${T_}_64)
endif (CMAKE_CL_64)
string(TOLOWER ${CMAKE_SYSTEM_NAME} T1_)
set(T_ ${T_}-${T1_})
if (MSVC90)
    set(T1_ "-vc-9.0")
elseif (MSVC10)
    set(T1_ "-vc-10.0")
elseif (MSVC80)
    set(T1_ "-vc-8.0")
elseif (MSVC71)
    set(T1_ "-vc-7.11")
elseif (MSVC70)
    set(T1_ "-vc-7")
elseif (MINGW)
    set(T1_ "-mgw")
    exec_program(${CMAKE_CXX_COMPILER}
        ARGS ${CMAKE_CXX_COMPILER_ARG1} -dumpversion
        OUTPUT_VARIABLE T2_
    )
    string(REGEX REPLACE "([0-9])\\.([0-9])(\\.[0-9])?" "\\1\\2" T2_ ${T2_})
    set(T1_ ${T1_}-${T2_})
else()
    set(T1_)
endif()
set(T_ ${T_}${T1_})
set(${PROJECT_NAME}_TAG ${T_})

# propose a default installation directory
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
    string(REGEX REPLACE "/${PROJECT_NAME}" "" CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
    set(T_ -${${PROJECT_NAME}_MAJOR_VERSION})
    set(T_ ${T_}-${${PROJECT_NAME}_MINOR_VERSION})
    set(T_ ${T_}-${${PROJECT_NAME}_BUILD_VERSION})
    set(CMAKE_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX}/${${PROJECT_NAME}_TAG}
        CACHE PATH
        "Install path prefix, prepended onto install directories."
        FORCE
    )
endif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)

# Find the Boost and Xerces libraries
set(Boost_USE_STATIC_LIBS   ON)
set(Boost_USE_MULTITHREADED ON)
set(Boost_ADDITIONAL_VERSIONS "1.42" "1.42.0" "1.43" "1.43.0" "1.46")

#find_package(Boost QUIET)
#if (NOT Boost_FOUND)
#    set(BOOST_INCLUDEDIR CACHE PATH  "Location of the boost include directory" )
#    message(FATAL_ERROR
#"Unable to find boost library.
#Please set the BOOST_INCLUDEDIR to point to the boost header files."
#)
#endif(NOT Boost_FOUND)

find_package(Boost
    COMPONENTS
        program_options
        system
        thread
        filesystem
    QUIET
)
if (NOT Boost_FOUND)
    set(BOOST_ROOT CACHE PATH  "Location of the boost root directory" )
    message(FATAL_ERROR
"Unable to find boost library.
Please set the BOOST_ROOT to point to the boost distribution files."
)
endif(NOT Boost_FOUND)

set(Xerces_USE_STATIC_LIBS On)
find_package(Xerces QUIET)
if (NOT Xerces_FOUND)
    set(XERCES_ROOT CACHE PATH "Location of the xerces library")
    message(FATAL_ERROR
"Unable to find xerces library.
Please set the the XERCES_ROOT to point to the root of the xerces directory."
)
endif (NOT Xerces_FOUND)

include_directories(
    include
    include/time_conversion
    src/refimpl
    ${Xerces_INCLUDE_DIR}
    ${Boost_INCLUDE_DIR}
)

link_directories(
    ${Boost_LIBRARY_DIRS}
)

add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})
set(CDEFS "XERCES_STATIC_LIBRARY\;E57_REFIMPL_REVISION_ID=${${PROJECT_NAME}_TAG}\;SVN_VERSION=${${PROJECT_NAME}_BUILD_VERSION}")
set(CFLAGS " ")

#
# The reference implementation
#

add_library( E57RefImpl STATIC
    src/refimpl/E57Foundation.cpp
    src/refimpl/E57FoundationImpl.cpp
    src/refimpl/E57FoundationImpl.h
    include/E57Foundation.h
)
set_target_properties( E57RefImpl
    PROPERTIES COMPILE_DEFINITIONS ${CDEFS}
)
set_target_properties( E57RefImpl
    PROPERTIES DEBUG_POSTFIX "-d"
    COMPILE_FLAGS ${CFLAGS}
)
install(
    FILES
        include/E57Foundation.h
    DESTINATION
        include/e57
)
install(
    TARGETS
        E57RefImpl
    ARCHIVE DESTINATION
        lib
)

#
# Files for LAS format support
#

add_library( LASReader STATIC
    src/LASReader/LASReader.cpp
    include/LASReader.h
)
set_target_properties( LASReader
    PROPERTIES COMPILE_DEFINITIONS ${CDEFS}
    COMPILE_FLAGS ${CFLAGS}
)

#
# Time conversion utilities
#

add_library( time_conversion STATIC
    src/time_conversion/time_conversion.c
    include/time_conversion/time_conversion.h
    include/time_conversion/basictypes.h
    include/time_conversion/constants.h
    include/time_conversion/gnss_error.h
)

#
# Example programs
#

add_executable( DemoWrite01
    src/examples/DemoWrite01.cpp
)
set_target_properties( DemoWrite01
    PROPERTIES COMPILE_DEFINITIONS ${CDEFS}
    COMPILE_FLAGS ${CFLAGS}
)
target_link_libraries( DemoWrite01
    E57RefImpl
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${Xerces_LIBRARY_RELEASE}
)

add_executable( DemoRead01
    src/examples/DemoRead01.cpp
)
set_target_properties( DemoRead01
    PROPERTIES COMPILE_DEFINITIONS ${CDEFS}
    COMPILE_FLAGS ${CFLAGS}
)
target_link_libraries( DemoRead01
    E57RefImpl
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${Xerces_LIBRARY_RELEASE}
)

#
# E57-4 Tools
#

add_executable( las2e57
    src/tools/las2e57.cpp
)
set_target_properties( las2e57
    PROPERTIES COMPILE_DEFINITIONS ${CDEFS}
    COMPILE_FLAGS ${CFLAGS}
)
target_link_libraries( las2e57
    E57RefImpl
    LASReader
    time_conversion
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${Xerces_LIBRARY_RELEASE}
    Rpcrt4.lib
)
install(
    TARGETS
        las2e57
    RUNTIME DESTINATION
        bin
)

add_executable( e57fields
    src/refimpl/tools/e57fields.cpp
)
set_target_properties( e57fields
    PROPERTIES COMPILE_DEFINITIONS ${CDEFS}
    COMPILE_FLAGS ${CFLAGS}
)
target_link_libraries( e57fields
    E57RefImpl
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${Xerces_LIBRARY_RELEASE}
)
install(
    TARGETS
        e57fields
    RUNTIME DESTINATION
        bin
)

add_executable( e57xmldump
    src/tools/e57xmldump.cpp
)
set_target_properties( e57xmldump
    PROPERTIES COMPILE_DEFINITIONS ${CDEFS}
    COMPILE_FLAGS ${CFLAGS}
)
target_link_libraries( e57xmldump
    E57RefImpl
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${Xerces_LIBRARY_RELEASE}
)
install(
    TARGETS
        e57xmldump
    RUNTIME DESTINATION
        bin
)

add_executable( e57validate
    src/tools/e57validate.cpp
)
set_target_properties( e57validate
    PROPERTIES COMPILE_DEFINITIONS ${CDEFS}
    COMPILE_FLAGS ${CFLAGS}
)
target_link_libraries( e57validate
    E57RefImpl
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${Xerces_LIBRARY_RELEASE}
)
install(
    TARGETS
        e57validate
    RUNTIME DESTINATION
        bin
)

add_executable( e57unpack
    src/tools/e57unpack.cpp
)
set_target_properties( e57unpack
    PROPERTIES COMPILE_DEFINITIONS ${CDEFS}
    COMPILE_FLAGS ${CFLAGS}
)
if (MSVC)
target_link_libraries( e57unpack
    E57RefImpl
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${E57_LIBRARY_RELEASE} ${Xerces_LIBRARY_RELEASE}
)
else (MSVC)
target_link_libraries( e57unpack
    E57RefImpl
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${E57_LIBRARY_RELEASE} ${Xerces_LIBRARY_RELEASE}
    ${Boost_LIBRARIES}
)
endif (MSVC)
install(
    TARGETS
        e57unpack
    RUNTIME DESTINATION
        bin
)

install(
    FILES
        CHANGES.TXT
        README.TXT
        src/E57RefImplConfig.cmake
    DESTINATION
        .
)


