# $Id$
# This is the CMake project file for the libe57 reference implementation
#
# Copyright 2010 Roland Schwarz, Riegl LMS GmbH
#
# Permission is hereby granted, free of charge, to any person or organization
# obtaining a copy of the software and accompanying documentation covered by
# this license (the "Software") to use, reproduce, display, distribute,
# execute, and transmit the Software, and to prepare derivative works of the
# Software, and to permit third-parties to whom the Software is furnished to
# do so, all subject to the following:
#
# The copyright notices in the Software and this entire statement, including
# the above license grant, this restriction and the following disclaimer,
# must be included in all copies of the Software, in whole or in part, and
# all derivative works of the Software, unless such copies or derivative
# works are solely in the form of machine-executable object code generated by
# a source language processor.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
# SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
# FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

cmake_minimum_required(VERSION 2.8)

# Private Xerces find module
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/Modules/")

project(libe57)

if (MSVC)
    # Compiler switches for C++
    set(CMAKE_CXX_FLAGS_DEBUG "/MTd /D_DEBUG /Zi /Ob0 /Od /RTC1")
    set(CMAKE_CXX_FLAGS_RELEASE "/MT /O2 /Ob2 /D NDEBUG")
    set(CMAKE_CXX_FLAGS_MINSIZEREL "/MT /O1 /Ob1 /D NDEBUG")
    set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/MT /Zi /O2 /Ob1 /D NDEBUG")
    # Compiler switches for C
    set(CMAKE_C_FLAGS_DEBUG "/MTd /D_DEBUG /Zi  /Ob0 /Od /RTC1")
    set(CMAKE_C_FLAGS_RELEASE "/MT /O2 /Ob2 /D NDEBUG")
    set(CMAKE_C_FLAGS_MINSIZEREL "/MT /O1 /Ob1 /D NDEBUG")
    set(CMAKE_C_FLAGS_RELWITHDEBINFO "/MT /Zi /O2 /Ob1 /D NDEBUG")
endif (MSVC)

# Find the Boost and Xerces libraries
find_package(Boost QUIET)
if (NOT Boost_FOUND)
    set(BOOST_INCLUDEDIR CACHE PATH  "Location of the boost include directory" )
    message(FATAL_ERROR
"Unable to find boost library.
Please set the BOOST_INCLUDEDIR to point to the boost header files."
)
endif(NOT Boost_FOUND)

set(Xerces_USE_STATIC_LIBS On)
find_package(Xerces QUIET)
if (NOT Xerces_FOUND)
    set(XERCES_ROOT CACHE PATH "Location of the xerces library")
    message(FATAL_ERROR
"Unable to find xerces library.
Please set the the XERCES_ROOT to point to the root of the xerces directory."
)
endif (NOT Xerces_FOUND)

include_directories(
    include
    include/time_conversion
    src/refimpl
    ${Xerces_INCLUDE_DIR}
    ${Boost_INCLUDE_DIR}
)

#
# The reference implementation
#

add_library( RefImpl STATIC
    src/refimpl/E57Foundation.cpp
    src/refimpl/E57FoundationImpl.cpp
    src/refimpl/E57FoundationImpl.h
    include/E57Foundation.h
)
set_target_properties( RefImpl
    PROPERTIES COMPILE_DEFINITIONS XERCES_STATIC_LIBRARY
)

#
# Files for LAS format support
#

add_library( LASReader STATIC
    src/LASReader/LASReader.cpp
    include/LASReader.h
)
set_target_properties( LASReader
    PROPERTIES COMPILE_DEFINITIONS XERCES_STATIC_LIBRARY
)

#
# Time conversion utilities
#

add_library( time_conversion STATIC
    src/time_conversion/time_conversion.c
    include/time_conversion/time_conversion.h
    include/time_conversion/basictypes.h
    include/time_conversion/constants.h
    include/time_conversion/gnss_error.h
)

#
# Example programs
#

add_executable( DemoWrite01
    src/examples/DemoWrite01.cpp
)
set_target_properties( DemoWrite01
    PROPERTIES COMPILE_DEFINITIONS XERCES_STATIC_LIBRARY
)
target_link_libraries( DemoWrite01
    RefImpl
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${Xerces_LIBRARY_RELEASE}
)

add_executable( DemoRead01
    src/examples/DemoRead01.cpp
)
set_target_properties( DemoRead01
    PROPERTIES COMPILE_DEFINITIONS XERCES_STATIC_LIBRARY
)
target_link_libraries( DemoRead01
    RefImpl
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${Xerces_LIBRARY_RELEASE}
)

#
# E57-4 Tools
#

add_executable( las2e57
    src/tools/las2e57.cpp
)
set_target_properties( las2e57
    PROPERTIES COMPILE_DEFINITIONS XERCES_STATIC_LIBRARY
)
target_link_libraries( las2e57
    RefImpl
    LASReader
    time_conversion
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${Xerces_LIBRARY_RELEASE}
)

add_executable( e57fields
    src/tools/e57fields.cpp
)
set_target_properties( e57fields
    PROPERTIES COMPILE_DEFINITIONS XERCES_STATIC_LIBRARY
)
target_link_libraries( e57fields
    RefImpl
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${Xerces_LIBRARY_RELEASE}
)

add_executable( e57xmldump
    src/tools/e57xmldump.cpp
)
set_target_properties( e57xmldump
    PROPERTIES COMPILE_DEFINITIONS XERCES_STATIC_LIBRARY
)
target_link_libraries( e57xmldump
    RefImpl
    debug ${Xerces_LIBRARY_DEBUG}
    optimized ${Xerces_LIBRARY_RELEASE}
)

